wacky_test <- mtc.run(test, n.adapt = 0, n.iter = 500, thin = 5)
p
summary(wacky_test)
plot(wacky_test)
gelman.plot(wacky_test)
wacky_test <- mtc.run(test, n.adapt = 0, n.iter = 500, thin = 1)
summary(wacky_test)
plot(wacky_test)
gelman.diag(wacky_test)
gelman.plot(wacky_test)
results_test_3 <- mtc.run(test, n.adapt = 5000, n.iter = 30000, thin = 1)
plot(results_test_3)
gelman.diag(results_test_3)
gelman.plot(results_test_3)
summary(results_test_3)
summary(results_test_2)
summary(results_test_1)
results_test_4 <- mtc.run(test, n.adapt = 10000, n.iter = 30000, thin = 5)
#this produces super weird results
summary(results_test_4)
plot(results_test_4)
results_test <- mtc.run(test, n.adapt = 5000, n.iter = 30000, thin = 5)
summary(results_test)
deviance_test <- mtc.deviance(results_test)
mtc.devplot(deviance_test)
small_test <- mtc.run(test, n.adapt = 0, n.iter = 500, thin = 1)
plot(small_test)
gelman.diag(small_test)
gelman.plot(small_test)
getwd()
library(gemtc)
library(dplyr)
library(rjags)
armLevel <- read.csv('Documents/PsA NMA/RCT_R_format_07.07.19.csv', stringsAsFactors = FALSE)
armLevel
trialLevel <- read.csv('Documents/PsA NMA/RCT_R_format_06.30.19.csv', stringsAsFactors = FALSE)
trialLevel['keep'] <- FALSE
i <- 1
for(i in(1:nrow(trialLevel))){
thisTrial <- trialLevel$study[i]
if(thisTrial %in% armLevel$study){
trialLevel$keep[i] <- TRUE
}
}
trialLevel$keep
armLevel <- read.csv('Documents/PsA NMA/RCT_R_format_07.07.19.csv', stringsAsFactors = FALSE)
trialLevel <- read.csv('Documents/PsA NMA/RCT_R_format_06.30.19.csv', stringsAsFactors = FALSE)
trialLevel['keep'] <- FALSE
i <- 1
for(i in(1:nrow(trialLevel))){
thisTrial <- trialLevel$study[i]
if(thisTrial %in% armLevel$study){
trialLevel$keep[i] <- TRUE
}
}
trialLevel$keep
test <- dplyr::filter(trialLevel, 'keep' = FALSE)
test <- dplyr::filter(trialLevel, 'keep' == FALSE)
test
test <- trialLevel$keep == TRUE
test <- trialLevel[trialLevel$keep == TRUE]
trialLevel <- trialLevel[trialLevel$keep == TRUE]
describe(armLevel$age, na.rm = TRUE)
?psych()
?psych
??psych
psych::describe(armLevel$age, na.rm = TRUE)
stats <- psych::describe(armLevel$age, na.rm = TRUE)
stats['type'] <- 'all studies'
i <- 1
for(i in(1:nrow(armLevel))){
this_str <- armLevel$treatment[i]
new_str<- gsub(" ", "_", this_str, fixed = TRUE)
new_str <- gsub("/", "_", new_str, fixed = TRUE)
new_str <- gsub(".", "_", new_str, fixed = TRUE)
armLevel$treatment[i] <- new_str
print(new_str)
}
test<- psych::describeBy(armLevel$age, group = armLevel$treatment)
test
View(test)
length(test)
test[0]
name(test[0])
test[0].name()
test[0].name
test[1].name
names(test)[1]
i <- 1
for(i in(1:length(test))){
stats$type[statsLength+i] <- names(test)[i]
stats[statsLength+i,]<- test[i]
print(stats[statsLength+i,])
}
statsLength <- nrow(stats)
i <- 1
for(i in(1:length(test))){
stats$type[statsLength+i] <- names(test)[i]
stats[statsLength+i,]<- test[i]
print(stats[statsLength+i,])
}
test[2]
stats[1]
stats[2]
stats
stats <- psych::describe(armLevel$age, na.rm = TRUE)
#stats['type'] <- 'all studies'
statsLength <- nrow(stats)
test<- psych::describeBy(armLevel$age, group = armLevel$treatment)
i <- 1
for(i in(1:length(test))){
#stats$type[statsLength+i] <- names(test)[i]
stats[statsLength+i,]<- test[i]
print(stats[statsLength+i,])
}
stats
View(stats)
test
test[2]
?rbind()
testStats <- rbind(stats, test)
ncol(stats)
ncol(test)
ncol(test[1])
ncol(test)[1]
test_1 <- test[,1]
test_1 <- test[1]
test_1
ncol(test_1)
test_1 <- test_1[1]
test_1
ncol(test_1)
View(test)
unlist(test_1)
names(test_1) <- NA
unlist(test_1)
stats <- psych::describe(armLevel$age, na.rm = TRUE)
test<- psych::describeBy(armLevel$age, group = armLevel$treatment)
names(stats)
names(test_1) <- names(stats)
names(test_1)
test_1
stats <- psych::describe(armLevel$age, na.rm = TRUE)
#stats['type'] <- 'all studies'
statsLength <- nrow(stats)
test<- psych::describeBy(armLevel$age, group = armLevel$treatment)
#testStats <- rbind(stats, test)
i <- 1
for(i in(1:length(test))){
#stats$type[statsLength+i] <- names(test)[i]
this_df <- unlist(test[i])
names(this_df) <- names(stats)
newDf <- rbind(stats, this_df)
}
newDf
stats <- psych::describe(armLevel$age, na.rm = TRUE)
#stats['type'] <- 'all studies'
statsLength <- nrow(stats)
test<- psych::describeBy(armLevel$age, group = armLevel$treatment)
#testStats <- rbind(stats, test)
i <- 1
for(i in(1:length(test))){
#stats$type[statsLength+i] <- names(test)[i]
this_df <- unlist(test[i])
names(this_df) <- names(stats)
if(i == 1){
newDf <- rbind(stats, this_df)
}else{
newDf <- rbind(newDf, this_df)
}
}
newDf
newDf['type'] <- 'none'
newDf$type[1] <- 'all'
newDf$type[2:] <- names(test)
allNames <- c('all', names(test))
allNames
newDf$type<- allNames
newDf
newDf['type'] <- 'none'
newDf
allNames <- c('all', names(test))
newDf$type<- allNames
view(newDf)
View(newDf)
stats <- psych::describe(armLevel$age, armLevel$percentF, armLevel$TJC, na.rm = TRUE)
#
stats
stats <- psych::describe(armLevel$age, na.rm = TRUE)
stats_1 <- psych::describe(armLevel$sampleSize, na.rm = TRUE)
newStats <- cbind(stats, stats_1)
newStats
newStats <- rbind(stats, stats_1)
#
newStats
View(newDf)
View(armLevel)
armLevel[,2]
descNames <- colnames(armLevel)
descNames
descNames <- descNames[3:]
descNames <- descNames[[3:]]
descNames <- descNames[3:length(descNames)]
descNames
i <- 3
for(i in(3:ncol(armLevel))){
stats <- psych::describe(armLevel[,i], na.rm = TRUE)
if(i == 3){
descDf <- stats
}else{
descDf <- rbind(descDf, stats)
}
}
descNames <- colnames(armLevel)
descNames <- descNames[3:length(descNames)]
descDf['variable'] <- descNames
colnames(armLevel)[1]
variables <- c('trialLength', 'sampleSize', 'percentF', 'percentWhite', 'age',
'TJC', 'SJC', 'length_PsA')
colnames(armLevel)[1] %in% variables
write.csv(newDf, 'Documents/PsA NMA/age_stats.csv')
i <- 1
for(i in(1:length(variables))){
if(colnames(armLevel)[i] %in% variables){
stats <- psych::describe(armLevel[,i], na.rm = TRUE)
if(i == 1){
descDf <- stats
}else{
descDf <- rbind(descDf, stats)
}
}
}
descDf['variable'] <- variables
write.csv(descDf, 'Documents/PsA NMA/descriptive_stats_all.csv')
descDf
1:length(variables)
length(variables)
i <- 1
for(i in(1:length(variables))){
if(colnames(armLevel)[i] %in% variables){
stats <- psych::describe(armLevel[,variables[i]], na.rm = TRUE)
if(i == 1){
descDf <- stats
}else{
descDf <- rbind(descDf, stats)
}
}
}
descDf['variable'] <- variables
descDf
i <- 1
for(i in(1:length(variables))){
if(colnames(armLevel)[i] %in% variables){
print(variables[i])
stats <- psych::describe(armLevel[,i], na.rm = TRUE)
if(i == 1){
descDf <- stats
}else{
descDf <- rbind(descDf, stats)
}
}
}
length(variables)
i <- 1
for(i in(1:length(variables))){
stats <- psych::describe(armLevel[,variables[i]], na.rm = TRUE)
if(i == 1){
descDf <- stats
}else{
descDf <- rbind(descDf, stats)
}
}
descDf['variable'] <- variables
write.csv(descDf, 'Documents/PsA NMA/descriptive_stats_all.csv')
#returns a dataframe with all the descriptive statistics for the total sample and each tx
getAllStudyVars <- function(df1, varName){
stats <- psych::describe(df1[varName])
test<- psych::describeBy(df1[varName], group = df1$treatment)
i <- 1
for(i in(1:length(test))){
#stats$type[statsLength+i] <- names(test)[i]
this_df <- unlist(test[i])
names(this_df) <- names(stats)
if(i == 1){
newDf <- rbind(stats, this_df)
}else{
newDf <- rbind(newDf, this_df)
}
}
allNames <- c('all', names(test))
newDf['type']<- allNames
newDf['variable'] <- varName
return(newDf)
}
i <- 1
for(i in(1:length(variables))){
df <- getAllStudyVars(armLevel, variables[i])
if(i == 1){
bigDf <- df
}else{
bigDf <- rbind(bigDf, stats)
}
}
i <- 1
for(i in(1:length(variables))){
df <- getAllStudyVars(armLevel, variables[i])
if(i == 1){
bigDf <- df
}else{
bigDf <- rbind(bigDf, df)
}
}
bigDf
warnings()
getAllStudyVars <- function(df1, varName){
stats <- psych::describe(df1[varName], na.rm = TRUE)
test<- psych::describeBy(df1[varName], group = df1$treatment, na.rm = TRUE)
i <- 1
for(i in(1:length(test))){
#stats$type[statsLength+i] <- names(test)[i]
this_df <- unlist(test[i])
names(this_df) <- names(stats)
if(i == 1){
newDf <- rbind(stats, this_df)
}else{
newDf <- rbind(newDf, this_df)
}
}
allNames <- c('all', names(test))
newDf['type']<- allNames
newDf['variable'] <- varName
return(newDf)
}
i <- 1
for(i in(1:length(variables))){
df <- getAllStudyVars(armLevel, variables[i])
if(i == 1){
bigDf <- df
}else{
bigDf <- rbind(bigDf, df)
}
}
warnings()
View(bigDf)
View(df)
View(bigDf)
filePath <- 'Documents/PsA NMA/'
fileLoc <- str(filePath, 'all_desc_stats_by_tx.csv')
fileLoc
fileLoc <- filePath+ 'all_desc_stats_by_tx.csv'
fileLoc <- paste(filePath, 'all_desc_stats_by_tx.csv', sep='')
write.csv(fileLoc)
fileLoc
write.csv(bigDf, fileLoc)
library(dplyr)
library(stats)
library(ggplot2)
library(psych)
library(survey)
library(psych)
defineDes <- function(dataset){
design <- svydesign(
id = ~VEREP,
strata = ~VESTR,
data = dataset,
weights = ~ANALWT_C,
nest = TRUE
)
return(design)
}
confIntToDf <- function(model, varName){
new<- data.frame(exp(cbind(coef(model), confint(model))))
new['variable'] <- varName
return(new)
}
mergeCiDfs <- function(bigDf, model, varName){
newDf <- confIntToDf(model, varName)
bigDf <- rbind(bigDf, newDf)
return(bigDf)
}
summaryToDf <- function(model, outcome){
results <- summary(model)
df <- data.frame(results$coefficients)
df['variable'] <- outcome
colnames(df) = c('Estimate', 'Std. Error', 't value', 'Pr(t)', 'outcome')
return(df)
}
mergeSummaryDfs <- function(bigDf, model, outcome){
new <- summaryToDf(model, outcome)
bigDf <- cbind(bigDf, new)
return(bigDf)
}
getwd()
directory <- getwd()
directory <- paste(directory, '/opioids/nsduh2017', sep='')
df1 <- read.csv(paste(directory, 'opioids_cleaned_data_v1.csv', sep = ''))
#
df1 <- read.csv(paste(directory, '/opioids_cleaned_data_v1.csv', sep = ''))
file_loc <- paste(directory, '/opioids_cleaned_data_v1.csv', sep = '')
df1 <- read.csv(file_loc)
file_loc
list.dirs()
getwd()
setwd(directory)
setwd("~/Documents/opioids/nsduh2017")
getwd()
?read.csv()
f1 <- read.csv('opioids_cleaned_data_v1.csv', header = TRUE)
#
df1 <- read.csv('opioids_cleaned_data_v1.csv', header = TRUE)
#
nsduh_design <-
svydesign(
id = ~VEREP,
strata = ~VESTR,
data = df1,
weights = ~ANALWT_C,
nest = TRUE
)
design1 <- update(
nsduh_design,
sex = IRSEX,
employment = employment,
race = raceF,
ed = education,
hasInsurance = hasInsurance,
insureType = insureTypeF,
marStat = marStat,
age = ageCourseF,
anyUse = anyPRUse,
anyMisUse = anyPRMisuse,
pyUse = usePY,
pyMisuse = misusePY,
depend = dependPY,
oneDoc = oneDoc,
multDocs = multDocs,
stoleDoc = stoleDoc,
gotFrRel = gotFrRel,
boughtFrRel = boughtFrRel,
tookFrRel = tookFrRel,
drugDeal = drugDeal,
otherSrc = otherSrc,
noOwnRx = noOwnRx,
greaterAmnt = greaterAmnt,
longer = longer,
moreOften = moreOften
)
View(design1)
buildUnivariateDf <- function(meanby, var){
ci <- data.frame(confint(meanby))
df <- data.frame(meanby)
if(ncol(df) == 2){
names(df) <- c('mean', 'SE')
df['sex'] <- 'all'
}else{
names(df) <- c('sex', 'mean', 'SE')
}
df <- cbind(df, data.frame(ci))
df['variable'] <- var
print(df)
return(df)
}
stackUnivariateDf <- function(df, meanby, var){
new <- buildUnivariateDf(meanby, var)
df <- rbind(df, new)
print(df)
return(df)
}
View(design1)
df <- buildUnivariateDf(svyby(~employment, ~sex, design1, svymean), 'employment')
df <- stackUnivariateDf(df, svymean(~employment, design1), 'employment')
result <- summary(svytable(~employment+sex, design1), statistic = 'adjWald')
df <- stackUnivariateDf(df, svyby(~race, ~sex, design1, svymean), 'race')
df <- stackUnivariateDf(df, svymean(~race, design1), 'race')
summary(svytable(~race+sex, design1), statistic = 'adjWald')
df <- stackUnivariateDf(df, svyby(~ed, ~sex, design1, svymean), 'education')
df <- stackUnivariateDf(df, svymean(~education, design1), 'education')
summary(svytable(~ed+sex, design1), statistic = 'adjWald')
df <- stackUnivariateDf(df, svyby(~insureType, ~sex, design1, svymean), 'insurance_type')
df <- stackUnivariateDf(df, svymean(~insureType, design1), 'insurance_type')
summary(svytable(~insureType+sex, design1), statistic = 'adjWald')
df <- stackUnivariateDf(df, svyby(~age, ~sex, design1, svymean), 'age')
df <- stackUnivariateDf(df, svymean(~age, design1), 'age')
summary(svytable(~age+sex, design1), statistic = 'adjWald')
df <- stackUnivariateDf(df, svyby(~marStat, ~sex, design1, svymean), 'marital_stat')
df <- stackUnivariateDf(df, svymean(~marStat, design1), 'marital_stat')
summary(svytable(~marStat+sex, design1), statistic = 'adjWald')
?survey
levels(df1$employment)
test <- levels(df1$employment)
length(test)
test_1 <- svyby(~employment, ~sex, design1, svymean)
test_1
t(test_1)
rownames(t(test_1))
names_test <- rownames(t(test_1))
'sex' %in% names_test
test_2 <- svymean(~employment, design1)
test_2 <- data.frame(test_2)
t(test_2)
test_2
test_1 <- svyby(~employment, ~sex, design1, svymean)
rbind(test_1, test_2)
cbind(test_1, test_2)
colnames(test_2) <- c('mean_all', 'se_all')
test_2
test_1
test_1_m <- filter(test_1, sex == 'Men')
test_1_m
rownames(test_2) %in% colnames(test_1_m)
rows <- rownames(test_2)
cols <- colnames(test_1_m)
